namespace codingame.common
{
	using System.Collections.Generic;
	using codingame_common;

	public class ConsoleSimulator
	{
		private readonly string[] _linesToRead;
		private readonly List<string> _writtenLines = new List<string>();
		private int _readLinesCount;

		public ConsoleSimulator(params string[] linesToRead)
		{
			_linesToRead = linesToRead;
		}

		public IEnumerable<string> WrittenLines => _writtenLines;

		public string ReadLine()
		{
			if (_readLinesCount >= _linesToRead.Length)
			{
				throw new NoMoreLinesToReadException();
			}

			return _linesToRead[_readLinesCount++];
		}

		public void WriteLine(object obj)
		{
			_writtenLines.Add(obj.ToString());
		}
	}
}


namespace codingame_common
{
	using System;
	public class NoMoreLinesToReadException : ArgumentException
	{
	}
}








namespace codingame.heat.detector
{
	using System;
	using System.Collections.Generic;
	using codingame_common;

	public class Building
	{
		private readonly Func<string> _readLine;
		private readonly Action<object> _writeLine;
		private readonly int _width;
		private readonly int _height;
		private readonly Stack<Window> _windowsHistory = new Stack<Window>();

		public Building(Func<string> readLine, Action<object> writeLine)
		{
			_readLine = readLine;
			_writeLine = writeLine;
			var inputs = _readLine().Split(' ');
			_width = int.Parse(inputs[0]); // width of the building.
			_height = int.Parse(inputs[1]); // height of the building.
			var N = int.Parse(_readLine()); // maximum number of turns before game over.
			_windowsHistory.Push(new Window(_readLine()));
		}

		public void Run()
		{
			// game loop
			while (true)
			{
				string bombDir;
				try
				{
					bombDir = _readLine();
				}
				catch (NoMoreLinesToReadException)
				{
					break;
				}

				var bombDirection = (Direction)Enum.Parse(typeof(Direction), bombDir);
				_writeLine(PredictJump(bombDirection)); // the location of the next window Batman should jump to.
			}
		}

		private Window PredictJump(Direction bombDirection)
		{
			var compositeDirection = bombDirection.Decompose();
			var currentWindow = _windowsHistory.Peek();
			var nextWindow = MovementVector.GetWindow(
				currentWindow, 
				compositeDirection,
				_width,
				_height);
			
			_windowsHistory.Push(nextWindow);
			return nextWindow;
		}
	}
}

namespace codingame.heat.detector
{
	public class CompositeDirection
	{
		public CompositeDirection(Direction component1, Direction? component2)
		{
			Component1 = component1;
			Component2 = component2;
		}

		public Direction Component1 { get; private set; }

		public Direction? Component2 { get; private set; }
	}
}


namespace codingame.heat.detector
{
	using System;
	using System.Linq;

	public enum Direction
	{
		U,
		UR,
		R,
		DR,
		D,
		DL,
		L,
		UL
	}

	public static class DirectionExtensions
	{
		private static bool IsComposed(this Direction direction)
		{
			return direction.ToString().Length == 2;
		}

		public static CompositeDirection Decompose(this Direction direction)
		{
			var parts = direction.ToString().ToCharArray().Select(s => s.ToString()).ToArray();
			var firstDirection = (Direction) Enum.Parse(typeof(Direction), parts[0]);
			var secondDirection = 
				direction.IsComposed() 
				? (Direction?) Enum.Parse(typeof(Direction), parts[1]) 
				: null;

			return new CompositeDirection(firstDirection, secondDirection);
		}
	}
}

namespace codingame.heat.detector
{
	public class MovementVector
	{
		public static Window GetWindow(
			Window currentWindow,
			CompositeDirection bombDirection,
			int buildingWidth,
			int buildingHeight)
		{
			var component1 = bombDirection.Component1;
			var component2 = bombDirection.Component2;
			var x = currentWindow.X;
			var y = currentWindow.Y;
			var vX = x;
			var vY = y;
			if (component2.HasValue && component1 == Direction.L)
			{
				vX = x - 1;
			}

			if (component2.HasValue && component1 == Direction.R)
			{
				vX = x + 1;
			}

			if (component2.HasValue && component1 == Direction.U)
			{
				vY = y - 1;
			}

			if (component2.HasValue && component1 == Direction.D)
			{
				vY = y + 1;
			}

			component2 = component2 ?? component1;
			if (component2 == Direction.L)
			{
				vX = x + (0 - x) / 2;
			}

			if (component2 == Direction.R)
			{
				vX = x + (buildingWidth - 1 - x) / 2;
			}

			if (component2 == Direction.U)
			{
				vY = y + (0 - y) / 2;
			}

			if (component2 == Direction.D)
			{
				vY = y + (buildingHeight - 1 - y) / 2;
			}

			return new Window(vX, vY);
		}
	}
}


namespace codingame.heat.detector
{
	using System;

	/**
     * Auto-generated code below aims at helping you parse
     * the standard input according to the problem statement.
     **/
	public class Program
	{
		public static void Main(string[] args)
		{
			var building = new Building(Console.ReadLine, Console.WriteLine);

			building.Run();
		}
	}
}


namespace codingame.heat.detector
{
	public class Window
	{
		public Window(string readLine)
		{
			var inputs = readLine.Split(' ');
			X = int.Parse(inputs[0]);
			Y = int.Parse(inputs[1]);
		}

		public Window(int x, int y)
		{
			X = x;
			Y = y;
		}

		public int Y { get; }

		public int X { get; }

		public override string ToString()
		{
			return X + " " + Y;
		}

		public override bool Equals(object obj)
		{
			if (ReferenceEquals(null, obj))
			{
				return false;
			}

			if (ReferenceEquals(this, obj))
			{
				return true;
			}

			var other = obj as Window;
			return other != null && Equals(other);
		}

		private bool Equals(Window other)
		{
			return X == other.X && Y == other.Y;
		}

		public override int GetHashCode()
		{
			return ToString().GetHashCode();
		}
	}
}







